name: Build and Push DevContainer

on:
  push:
    branches: [ main, dev ]
    paths:
      - '.devcontainer/**'
      - 'mise/**'
      - 'nvim/**'
      - 'zsh/**'
      - '.github/workflows/build-devcontainer.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '.devcontainer/**'
      - 'mise/**'
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to GitHub Container Registry'
        required: true
        default: true
        type: boolean
      cache_strategy:
        description: 'Docker build cache strategy'
        required: false
        default: 'registry'
        type: choice
        options:
          - registry
          - local
          - none

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/devcontainer

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      image_tag: ${{ steps.tag.outputs.tag }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate required files
        id: check
        run: |
          echo "üîç Validating required files..."
          
          required_files=(
            ".devcontainer/Dockerfile"
            ".devcontainer/install-mise-tools.sh"
            "mise/.config/mise/config.toml"
            "mise/.default-python-packages"
            "mise/.default-npm-packages"
          )
          
          all_files_exist=true
          for file in "${required_files[@]}"; do
            if [[ -f "$file" ]]; then
              echo "‚úÖ $file"
            else
              echo "‚ùå $file - MISSING"
              all_files_exist=false
            fi
          done
          
          if [[ "$all_files_exist" == "true" ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "‚úÖ All required files found"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "‚ùå Missing required files"
            exit 1
          fi

      - name: Generate image tag
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            tag="pr-${{ github.event.number }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            tag="latest"
          else
            tag="${{ github.ref_name }}"
          fi
          
          # Add commit short SHA for uniqueness
          short_sha="${{ github.sha }}"
          short_sha="${short_sha:0:7}"
          
          if [[ "$tag" != "latest" ]]; then
            tag="${tag}-${short_sha}"
          fi
          
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "üìù Generated image tag: ${tag}"

  build:
    name: Build DevContainer
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should_build == 'true'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        stage: [base-deps, user-setup, tools-cache, runtime]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.validate.outputs.image_tag }}
            type=raw,value=${{ matrix.stage }},suffix=-${{ needs.validate.outputs.image_tag }}

      - name: Build stage
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .devcontainer/Dockerfile
          target: ${{ matrix.stage }}
          platforms: linux/amd64
          push: false
          cache-from: type=gha,scope=${{ matrix.stage }}
          cache-to: type=gha,mode=max,scope=${{ matrix.stage }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.stage }}-${{ needs.validate.outputs.image_tag }}
          labels: ${{ steps.meta.outputs.labels }}

  build-final:
    name: Build and Push Final Image
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.should_build == 'true'
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request' && (github.event.inputs.push_to_registry != 'false')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.validate.outputs.image_tag }}

      - name: Build and push final image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .devcontainer/Dockerfile
          target: runtime
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' && (github.event.inputs.push_to_registry != 'false') }}
          cache-from: |
            type=gha,scope=base-deps
            type=gha,scope=user-setup
            type=gha,scope=tools-cache
            type=gha,scope=runtime
          cache-to: type=gha,mode=max,scope=runtime
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  test:
    name: Test Container
    runs-on: ubuntu-latest
    needs: [validate, build-final]
    if: needs.validate.outputs.should_build == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .devcontainer/Dockerfile
          target: runtime
          load: true
          tags: test-image:latest
          cache-from: type=gha,scope=runtime

      - name: Test container startup
        run: |
          echo "üß™ Testing container startup..."
          
          # Start container
          CONTAINER_ID=$(docker run -d test-image:latest sleep 60)
          echo "Container started: $CONTAINER_ID"
          
          # Wait for container to be ready
          sleep 10
          
          # Test basic functionality
          echo "Testing basic shell..."
          docker exec $CONTAINER_ID /bin/zsh -c 'echo "ZSH is working"'
          
          echo "Testing mise..."
          docker exec $CONTAINER_ID /bin/zsh -c 'source ~/.zshrc && mise --version'
          
          echo "Testing dependencies..."
          docker exec $CONTAINER_ID /bin/bash -c '
            echo "Checking required tools..."
            which bash zsh grep wget curl tar bzip2 xz patch gcc clang mise stow
            echo "All tools found!"
          '
          
          # Cleanup
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID
          
          echo "‚úÖ Container tests passed!"

  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [validate, build, build-final, test]
    if: always() && (needs.validate.outputs.should_build == 'true')
    
    steps:
      - name: Build Status Summary
        run: |
          echo "üèóÔ∏è DevContainer Build Summary"
          echo "================================"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Image Tag: ${{ needs.validate.outputs.image_tag }}"
          echo ""
          
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "‚úÖ Build and tests completed successfully!"
            echo "üöÄ Image available at: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.image_tag }}"
          else
            echo "‚ùå Build or tests failed"
            echo "Check the workflow logs for details"
          fi
